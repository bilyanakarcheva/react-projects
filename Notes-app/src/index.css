*,
*::after /* what does this do?  - It selects all elements and pseudo-elements */
*::before {
  box-sizing: border-box; /* border-box is the default box-sizing model. The width and height properties include the content, padding, and border, but not the margin. */
  margin: 0;
  padding: 0;
}

:root {
  --_hue: 780; 
  --_size: 2.2rem;
  --_radius: .2em;
  --_tspeed_fast: 150ms; /* what is transition speed? - The transition-timing-function property specifies the speed curve of the transition effect. It can have the following values: ease, linear, ease-in, ease-out, ease-in-out, cubic-bezier(n,n,n,n), initial, inherit. */
  --_tspeed_slow: 400ms;
  --_ttype_squish: cubic-bezier(0.86, -0.1, 0.27, 1.15); 

  /* Light theme */
  --bg--light: var(--_hue) 40% 90%; /* what is this? - It is a CSS function that creates a color value from a hue, saturation, and lightness. */
  --txt--light: var(--_hue) 40% 7%; /* the first value is the hue itself, the second value is saturation, and the third value is lightness. */
  --accent--light: var(--_hue) 55% 55%;
  --muted--light: var(--_hue) 40% 94%;
  /* --muted--light: calc(var(--_hue) + 190) 30% 99%; */

  /* Dark theme */
  --bg--dark: var(--_hue) 20% 13%;
  --txt--dark: var(--_hue) 30% 88%;
  --accent--dark: var(--_hue) 50% 50%;
  --muted--dark: var(--_hue) 40% 4%;

 /* Default theme - Dark*/
  --bg: var(--bg--dark);
  --txt: var(--txt--dark);
  --accent: var(--accent--dark);
  --muted: var(--muted--dark);
  color-scheme: dark;


  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
  /* line-height: 1.5; */
  font-weight: 400;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/* prefers reduced motion*/
@media (prefers-reduced-motion: reduce) {
  :root {
    --_tspeed_fast: 50ms;
    --_tspeed_slow: 50ms;
  }
}

body {
  margin: 0;
  display: grid;
  place-items: center;
  min-width: 320px;
  min-height: 100vh; /* what is vh? - vh is a CSS unit that represents the height of the viewport. 1vh is equal to 1% of the viewport height. */
  /* what is viewport? - The viewport is the user's visible area of a web page. */
  font-family: inherit;
  background-color: hsl(var(--bg)); /* what is hsl? - The hsl() function in CSS is used to specify colors using the Hue-Saturation-Lightness model. */
  color: hsl(var(--txt));
}

::selection {
  background-color: hsl(var(--accent));
  color: hsl(var(--bg));
}

h1 {
  font-size: calc(var(--_size) * 1.5);  
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: none;
  padding: 0.6em;
  font-weight: 500;
  font-family: inherit;
  background-color: hsl(var(--accent));
  cursor: pointer;
  transition: border-color 0.25s;
  color: inherit;
  font: inherit;
  /* min-width: 2.5em;  */
  /* Adjust this value as needed to maintain the button size */
  /* box-shadow: 0 0 0 0.1em hsl(var(--accent)); */
  text-align: center;
}

.btn-secondary {
  background-color: hsl(var(--muted));
  color: hsl(var(--txt));
}
button:hover {
  border-color: hsl(var(--accent));
  box-shadow: inherit;	/*how to add shadow to button - box-shadow: h-shadow v-shadow blur spread color */
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    --bg: var(--bg--light);
    --txt: var(--txt--light);
    --accent: var(--accent--light);
    --muted: var(--muted--light);
    color-scheme: light;
  }
  a:hover {
    color: hsl(var(--accent));
  }
}

.btn-group {
  display: flex;
  flex-wrap: wrap;
  gap: 1em;
  justify-content: center;
}

.btn {
  font-size: calc(var(--_size) / 2.2);
}

input, label {
  font: inherit;
}

.container {
  margin-inline: max(calc((100vw - 70rem) / 2), 1.5rem);
  display: grid;
  gap: 1.5vmax; /* what is vmax? - vmax is a CSS unit that represents the larger of the two: vw, vh. */
  text-align: center;
}

.input-wrapper {
  display: flex;
  gap: 1.5em;
  position: relative;
  margin-block-start: .6em;
}

form {
  display: grid;
  gap: .8em;
  max-width: calc(var(--_size) * 20);
  font-size: calc(var(--_size) * 0.5);;
  text-align: left;
  place-items: center;
  padding-block: 0.5em;
}

.form-label {
  text-transform: uppercase;
  font-size: .9em;
  letter-spacing: .05em;
  margin-inline: .5em;
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  padding: .1em, .35em;
  background-color: hsl(var(--muted));
  transition: 
    transform  var(--_tspeed_fast) var(--_ttype_squish),
    background-color var(--_tspeed_fast) var(--_ttype_squish);
  /* display: none; */
}

.form-input {
  border: none;
  border-radius: var(--_radius);
  padding: .35em .75em;
  width: 100%;
  background-color: hsl(var(--muted));
  caret-color: hsl(var(--accent));
  box-shadow: 
    0 0 0 -.1em hsl(var(--bg)), 
    0 0 0 -.2em hsl(var(--accent) / .8);
  transition:
    box-shadow var(--_tspeed_fast) var(--_ttype_squish);
}

.form-input::placeholder {
  opacity: 0;
}

.form-input:focus ~ .form-label,
.form-input:not(:placeholder-shown) ~ .form-label {
  transform: translate3d(0, -2.75em, 0);
  background-color: hsl(var(--bg));
  color: hsl(var(--accent) );
}

.form-input:focus {
  outline: none;
  box-shadow: 
    0 0 0 .2em hsl(var(--bg) ), 
    0 0 0 .4em hsl(var(--accent) / .8);
}

