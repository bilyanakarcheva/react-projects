*,
*::after /* what does this do?  - It selects all elements and pseudo-elements */
*::before {
  box-sizing: border-box;  /* border-box is the default box-sizing model. The width and height properties include the content, padding, and border, but not the margin. */
  margin: 0;
  padding: 0;
}

:root {
  --_hue: 250;
  --_size: 2.2rem;
  --_radius: .2em;
  --_tspeed_fast: 150ms;
  /* what is transition speed? - The transition-timing-function property specifies the speed curve of the transition effect. It can have the following values: ease, linear, ease-in, ease-out, ease-in-out, cubic-bezier(n,n,n,n), initial, inherit. */
  --_tspeed_slow: 400ms;
  --_ttype_squish: cubic-bezier(0.86, -0.1, 0.27, 1.15);

  /* Light theme */
  --bg--light: var(--_hue) 40% 85%;
  /* what is this? - It is a CSS function that creates a color value from a hue, saturation, and lightness. */
  --txt--light: var(--_hue) 30% 12%;
  /* the first value is the hue itself, the second value is saturation, and the third value is lightness. */
  --accent--light: var(--_hue) 55% 55%;
  --muted--light: var(--_hue) 40% 98%;
  /* --muted--light: calc(var(--_hue) + 190) 30% 99%; */
  --secondary--light: calc(var(--_hue) - 175) 70% 60%;

  /* Dark theme */
  --bg--dark: var(--_hue) 20% 13%;
  --txt--dark: var(--_hue) 30% 88%;
  --accent--dark: var(--_hue) 50% 45%;
  --muted--dark: var(--_hue) 40% 4%;
  --secondary--dark: calc(var(--_hue) - 175) 45% 45%;

  /* Default theme - Dark*/
  --bg: var(--bg--dark);
  --txt: var(--txt--dark);
  --accent: var(--accent--dark);
  --muted: var(--muted--dark);
  --secondary: var(--secondary--dark);
  color-scheme: dark;

  /* Custom theme */
  --bg--custom: 220 80% 75%;
  --txt--custom: 220 30% 12%;
  --accent--custom: 220 55% 55%;
  --muted--custom: 220 40% 98%;
  --secondary--custom: 220 70% 80%;

  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;

}

:root[data-theme="light"] {
  --bg: var(--bg--light);
  --txt: var(--txt--light);
  --accent: var(--accent--light);
  --muted: var(--muted--light);
  --secondary: var(--secondary--light);
  color-scheme: light;
}

:root[data-theme="dark"] {
  --bg: var(--bg--dark);
  --txt: var(--txt--dark);
  --accent: var(--accent--dark);
  --muted: var(--muted--dark);
  --secondary: var(--secondary--dark);
  color-scheme: dark;
}

:root[data-theme="custom"] {
  --bg: var(--bg--custom);
  --txt: var(--txt--custom);
  --accent: var(--accent--custom);
  --muted: var(--muted--custom);
  --secondary: var(--secondary--custom);
  color-scheme: custom;
}

#root {
  display: grid;
  gap: 1.5em;
  padding: 0;
  margin: 0;
  align-items: start;
}

/* prefers reduced motion*/
@media (prefers-reduced-motion: reduce) {
  :root {
    --_tspeed_fast: 50ms;
    --_tspeed_slow: 50ms;
  }
}

@media screen and (max-width: 768px) {
  :root {
    --_size: 2rem;
  }
}


body {
  min-height: 100vh;
  justify-items: center;
  margin: 0;
  display: grid;
  line-height: 1.5;
  /* min-width: 320px; */
  /* what is vh? - vh is a CSS unit that represents the height of the viewport. 1vh is equal to 1% of the viewport height. */
  /* what is viewport? - The viewport is the user's visible area of a web page. */
  font-family: inherit;
  background-color: hsl(var(--bg));
  /* what is hsl? - The hsl() function in CSS is used to specify colors using the Hue-Saturation-Lightness model. */
  color: hsl(var(--txt));
}

::selection {
  background-color: hsl(var(--accent));
  color: hsl(var(--bg));
}

h1 {
  font-size: calc(var(--_size) * 1.5);
  line-height: 1.1;
}

button {
  display: grid;
  border-radius: 8px;
  border: none;
  padding: 0.6em;
  font-weight: 500;
  font-family: inherit;
  background-color: hsl(var(--accent));
  cursor: pointer;
  transition: border-color 0.25s;
  color: inherit;
  font: inherit;
  place-items: center;
  /* min-width: 2.5em;  */
  /* Adjust this value as needed to maintain the button size */
  /* box-shadow: 0 0 0 0.1em hsl(var(--accent)); */
  text-align: center;
  box-shadow:
    .5em .1em .9em hsl(var(--accent) / .3),
    0 0 0 -0.1em hsl(var(--bg)),
    0 0 0 -0.2em hsl(var(--accent));
  transition:
    box-shadow var(--_tspeed_fast) var(--_ttype_squish),
    background-color var(--_tspeed_fast) var(--_ttype_squish);
}

.btn {
  font-size: calc(var(--_size) / 2.2);
}

.btn:where(:active, :hover) {
  background-color: hsl(var(--accent) / .8);
}

.btn-secondary {
  /* background-color: hsl(var(--muted)); */
  --accent: var(--secondary);
  color: hsl(var(--txt));
}

.btn :where(svg, img) {
  width: var(--_size);
  height: var(--_size);
}

button:hover {
  border-color: hsl(var(--accent));
  box-shadow: inherit;
  /*how to add shadow to button - box-shadow: h-shadow v-shadow blur spread color */
}

button:active {
  transform: scale(0.95);
}

.btn:focus {
  outline: none;
  /* what is focus ring? - The focus ring is a visual indicator that highlights the element that currently has keyboard focus. */
}

.btn:focus-visible {
  /* box-shadow: 0 0 0 .2em hsl(var(--accent) / .8); */
  box-shadow:
    0 0 0 hsl(var(--accent) / .3),
    0 0 0 .2em hsl(var(--bg)),
    0 0 0 .4em hsl(var(--accent) / .6);
  /* what do the box-shadow elements do here? - The first value is the horizontal shadow, the second value is the vertical shadow, the third value is the blur radius, the fourth value is the spread radius, and the last value is the color of the shadow. */
}


@media (prefers-color-scheme: light) {
  :root {
    --bg: var(--bg--light);
    --txt: var(--txt--light);
    --accent: var(--accent--light);
    --muted: var(--muted--light);
    color-scheme: light;
  }

  a:hover {
    color: hsl(var(--accent));
  }
}

@media (prefers-color-scheme: dark) {
  :root {
    --bg: var(--bg--dark);
    --txt: var(--txt--dark);
    --accent: var(--accent--dark);
    --muted: var(--muted--dark);
    color-scheme: dark;
  }

  a:hover {
    color: hsl(var(--accent));
  }
}


input,
label {
  font: inherit;
}

.container {
  /* height: 100%; */
  /* width: 100%; */
  /* margin-inline: max(calc((100vw - 70rem) / 2), 1.5rem); */
  display: grid;
  gap: 1.5vmax;
  /* what is vmax? - vmax is a CSS unit that represents the larger of the two: vw, vh. */
  /* text-align: center; */
  align-items: start;
  /* how to put everything that is inside the container in the top? - align-items: start; */
}

.input-wrapper {
  display: flex;
  flex: 1 1 100%;
  gap: 0.5em;
  position: relative;
  margin-block-start: .6em;
  max-height: 2.7em;
}

form {
  display: grid;
  /* gap: .8em; */
  max-width: calc(var(--_size) * 20);
  font-size: calc(var(--_size) * 0.5);
  text-align: left;
  /* place-items: center; */
  padding-block: 0.5em;
}

.form-label {
  text-transform: uppercase;
  font-size: .9em;
  letter-spacing: .05em;
  margin-inline: .5em;
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  padding: .1em, .35em;
  background-color: hsl(var(--muted));
  transition:
    transform var(--_tspeed_fast) var(--_ttype_squish),
    background-color var(--_tspeed_fast) var(--_ttype_squish);
  /* display: none; */
}

.form-input {
  border: none;
  border-radius: var(--_radius);
  padding: .35em .75em;
  width: 100%;
  background-color: hsl(var(--muted));
  caret-color: hsl(var(--accent));
  box-shadow:
    0 0 0 -.1em hsl(var(--bg)),
    0 0 0 -.2em hsl(var(--accent) / .8);
  transition:
    box-shadow var(--_tspeed_fast) var(--_ttype_squish);
}

.form-input::placeholder {
  opacity: 0;
}

.form-input:focus~.form-label,
.form-input:not(:placeholder-shown)~.form-label {
  transform: translate3d(0, -2.75em, 0);
  background-color: hsl(var(--bg));
  color: hsl(var(--accent));
}

.form-input:focus {
  outline: none;
  box-shadow:
    0 0 0 .2em hsl(var(--bg)),
    0 0 0 .4em hsl(var(--accent) / .8);
}

/* Notes List*/
.notes-list {
  display: grid;
  gap: 1em;
  /* max-width: 40rem; */
  margin-inline: auto;
  padding-inline-start: 0%;
}

.theme-bar {
  display: flex;
  padding-top: 0.7em;
  gap: 1em;
  justify-content: center;
}

.theme {
  gap: 1em;
  grid-auto-flow: column;
  justify-content: center;
  border-radius: calc(var(--_radius) * 6);
  position: relative; 
}

.btn::after {
  content:  attr(aria-label);
  position: absolute;
  top: calc(100% + 0.5em);
  font-size: .8em;
  min-width: max-content;
  padding: .2em .5em;
  border-radius: var(--_radius);
  border: none;
  background-color: hsl(var(--bg));
  color: hsl(var(--txt));
  box-shadow:
    0 0 0 .2em hsl(var(--accent) / .95);
  opacity: 0;
  transition: opacity var(--_tspeed_fast) var(--_ttype_squish);
}

.btn:is(:hover, :focus-visible)::after {
  opacity: 1;
}